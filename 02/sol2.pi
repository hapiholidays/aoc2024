#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"

#define $popint \
  2->1: String; \
  1->2 \
  {^nil: \
    $end; \
   ^cons: \
    1->2: Int; \
    1->2: String; \
    $end; \
  }
global $popint popint(1,2);
local service PopintService(popint (1 of 2) this) // {{{
( this[2]>>str;
  sf=new strfind(2 of 2);
  sf[1]<<str<<" ";
  sf[1]>>pos;
  if pos<=0
  then this[2]<<^nil;
  else String istr=str/pos;
       Int i=0;
       STRING2INT(istr,i);
       String tail=str%(pos+1);
       this[2]<<^cons<<i<<tail;
) // }}}
|
#define $xsafereport \
  2->1: $list(Int)(2 of 1 pure,2); \
  2->1: Bool; \
  1->2: Bool; \
  $end;
global $xsafereport xsafereport(1,2);
local service XSaveReportService(xsafereport (1 of 2) this) // {{{
( this[2]>>report>>inc;
  report[1]<<^pop;
  report[1]>>
  {^nil:
    //c=new console(2 of 2);
    //c[1]<<^str<<"Bad report: "+report<<^nl<<^end;
    this[2]<<false;
   ^cons:
    local SafeReport(1->2:Bool;$end;(1 of 1,2) this, $list(Int)(2 of 1 pure,2) rs, Int prev) // {{{
    ( rs[1]<<^pop;
      rs[1]>>
      {^nil:
        //c=new console(2 of 2);
        //c[1]<<^str<<" Safe"<<^nl<<^end;
        this[2]<<true;
       ^cons:
        rs[1]>>r>>rtail;
        //c=new console(2 of 2);
        //c[1]<<^str<<" "<<^int<<r<<^end;
        if not inc
           then // Decreasing
             if (r+1<=prev) and (prev<=r+3)
             then SafeReport(this,rtail,r);
             else //c=new console(2 of 2);
                  //c[1]<<^str<<" Unsafe"<<^nl<<^end;
                  rtail[1]<<^end;
                  this[2]<<false; // Unsafe
           else // Increasing
             if (prev+1<=r) and (r<=prev+3)
             then SafeReport(this,rtail,r);
             else //c=new console(2 of 2);
                  //c[1]<<^str<<" Unsafe"<<^nl<<^end;
                  rtail[1]<<^end;
                  this[2]<<false; // Unsafe
      }
    ) // }}}
    //c=new console(2 of 2);
    //c[1]<<^int<<r1<<^end;
    report[1]>>r1>>rtail;
    SafeReport(this,rtail,r1);
  }
) // }}}
|
#define $safereport \
  2->1: $list(Int)(2 of 1 pure,2); \
  1->2: Bool; \
  $end;
global $safereport safereport(1,2);
local service SafeReportService(safereport (1 of 2) this) // {{{
( local TestReport(1->2:Bool;$end;(1 of 1,2) this, $list(Int)(2 of 1 pure,2) rstart, $list(Int)(2 of 1 pure,2) rend) // {{{
  ( rend[1]<<^pop;
    rend[1]>>
    {^nil:
      rstart[1]<<^end;
      this[2]<<false;
     ^cons:
      rend[1]>>r>>rtail;
      rstart[1]<<^copy;
      rstart[1]>>rs;
      rtail[1]<<^copy;
      rtail[1]>>re;
      rstart[1]<<^snoc<<r;
      rs[1]<<^append<<re;
      rs[1]<<^copy;
      rs[1]>>rs2;
      xs = new xsafereport(2 of 2);
      xs[1]<<rs<<true;
      xs[1]>>safe1;
      if safe1
      then rstart[1]<<^end;
           rtail[1]<<^end;
           rs2[1]<<^end;
           this[2]<<true;
      else xs2=new xsafereport(2 of 2);
           xs2[1]<<rs2<<false;
           xs2[1]>>safe2;
           if safe2
           then rstart[1]<<^end;
                rtail[1]<<^end;
                this[2]<<true;
           else TestReport(this,rstart,rtail);
    }
  ) // }}}
  this[2]>>report;
  rs=new list(2 of 2);
  rs<<Int;
  TestReport(this,rs,report);
) // }}}
|
#define $safereportstr \
  2->1: String; \
  1->2: Bool; \
  $end;
global $safereportstr safereportstr(1,2);
local service SafeReportStrService(safereportstr (1 of 2) this) // {{{
( local MakeReport(1->2:Bool;$end;(1 of 1,2) this, $list(Int)(2 of 1 pure,2) rs, String rstr) // {{{
  ( sf=new strfind(2 of 2);
    sf[1]<<rstr<<" ";
    sf[1]>>pos;
    if pos<=0
    then sr1=new safereport(2 of 2);
         sr1[1]<<rs;
         sr1[1]>>safe1;
         this[2]<<safe1;
    else String r1str=rstr/pos;
         Int r1=0;
         STRING2INT(r1str,r1);
         String rstr2=rstr%(pos+1);
         rs[1]<<^snoc<<r1;
         MakeReport(this,rs,rstr2);
  ) // }}}
  this[2]>>rstr;
  rs=new list(2 of 2);
  rs<<Int;
  MakeReport(this,rs,rstr+" ");
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) reports, Int countsafe) // {{{
( reports[1]<<^pop;
  reports[1]>>
  {^nil:
    c=new console(2 of 2);
    c[1]<<^str<<"Result: "<<^int<<countsafe<<^nl<<^end;
   ^cons:
    reports[1]>>report>>rest;
    srs=new safereportstr(2 of 2);
    srs[1]<<report;
    srs[1]>>safe;
    if safe
    then Process(rest,countsafe+1);
    else Process(rest,countsafe);
  }
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) reports) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,reports);
      else reports[1]<<^cons<<line;
           ProcessFile2(fin,reports);
     ^None:
      rreports=new revlist(2 of 2);
      rreports<<String;
      rreports[1]<<reports;
      Process(rreports,0);
    }
  ) // }}}
  reports=new list(2 of 2);
  reports<<String;
  ProcessFile2(fin,reports);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
