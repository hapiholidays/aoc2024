#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"

#define $popint \
  2->1: String; \
  1->2 \
  {^nil: \
    $end; \
   ^cons: \
    1->2: Int; \
    1->2: String; \
    $end; \
  }
global $popint popint(1,2);
local service PopintService(popint (1 of 2) this) // {{{
( this[2]>>str;
  sf=new strfind(2 of 2);
  sf[1]<<str<<" ";
  sf[1]>>pos;
  if pos<=0
  then this[2]<<^nil;
  else String istr=str/pos;
       Int i=0;
       STRING2INT(istr,i);
       String tail=str%(pos+1);
       this[2]<<^cons<<i<<tail;
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) reports, Int countsafe) // {{{
( reports[1]<<^pop;
  reports[1]>>
  {^nil:
    c=new console(2 of 2);
    c[1]<<^str<<"Result: "<<^int<<countsafe<<^nl<<^end;
   ^cons:
    reports[1]>>report>>rest;
    pi=new popint(2 of 2);
    pi[1]<<report;
    pi[1]>>
    {^nil:
      c=new console(2 of 2);
      c[1]<<^str<<"Bad report: "+report<<^nl<<^end;
      Process(rest,countsafe);
     ^cons:
      pi[1]>>r1>>rtail;
      pi2=new popint(2 of 2);
      pi2[1]<<rtail;
      pi2[1]>>
      {^nil:
        c=new console(2 of 2);
        c[1]<<^str<<"Bad report: "+report<<^nl<<^end;
        Process(rest,countsafe);
       ^cons:
         pi2[1]>>r2>>rrtail;
         local ProcessReport($list(String)(2 of 1 pure,2) reports, String rs, Bool increasing, Int prev) // {{{
         ( sf=new strfind(2 of 2);
           sf[1]<<rs<<" ";
           sf[1]>>pos;
           if pos<=0
           then c=new console(2 of 2);
                c[1]<<^str<<" Safe"<<^nl<<^end;
                Process(reports,countsafe+1); // Safe
           else String rstr=rs/pos;
                Int r=0;
                STRING2INT(rstr,r);
                String rrs=rs%(pos+1);
                c=new console(2 of 2);
                c[1]<<^str<<" "<<^int<<r<<^end;
                if not increasing
                then // Decreasing
                  if (r+1<=prev) and (prev<=r+3)
                  then ProcessReport(reports,rrs,increasing,r);
                  else c=new console(2 of 2);
                       c[1]<<^str<<" Unsafe"<<^nl<<^end;
                       Process(reports,countsafe); // Unsafe
                else // Increasing
                  if (prev+1<=r) and (r<=prev+3)
                  then ProcessReport(reports,rrs,increasing,r);
                  else c=new console(2 of 2);
                       c[1]<<^str<<" Unsafe"<<^nl<<^end;
                       Process(reports,countsafe); // Unsafe
         ) // }}}
         c=new console(2 of 2);
         c[1]<<^int<<r1<<^end;
         ProcessReport(rest,rtail+" ",r1<=r2,r1);
      }
    }
  }
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) reports) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,reports);
      else reports[1]<<^cons<<line;
           ProcessFile2(fin,reports);
     ^None:
      rreports=new revlist(2 of 2);
      rreports<<String;
      rreports[1]<<reports;
      Process(rreports,0);
    }
  ) // }}}
  reports=new list(2 of 2);
  reports<<String;
  ProcessFile2(fin,reports);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
