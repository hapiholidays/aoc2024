#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
//#include "strutils.pi"

#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define ispure
#define $counttrailsres \
  1->2:Int; \
  1->2:$list(String)(2 of 1 pure,2); \
  $end;
#define $counttrails \
  2->1:Int; \
  2->1:Int; \
  2->1:Int; \
  2->1:$list(String)(2 of 1 pure,2); \
  $counttrailsres
global $counttrails counttrails(1 ispure,2);
local ispure service Service(counttrails (1 of 2) this) // {{{
( this[2]>>x>>y>>z>>map;
  if 0<=y
  then map[1]<<^get<<y;
       map[1]>>
       {^err:
         map[1]>>err;
         this[2]<<0<<map;
        ^val:
         map[1]>>hline;
         if (0<=x) and (x+1<=hline&^length)
         then if hline&x=z
              then // state is legal
                   if z="9"&0
                   then this[2]<<1<<map;
                   else cup=new counttrails(2 of 2);
                        cup[1]<<x<<y-1<<z+1<<map;
                        cup[1]>>nup>>map;
                        cdown=new counttrails(2 of 2);
                        cdown[1]<<x<<y+1<<z+1<<map;
                        cdown[1]>>ndown>>map;
                        cleft=new counttrails(2 of 2);
                        cleft[1]<<x-1<<y<<z+1<<map;
                        cleft[1]>>nleft>>map;
                        cright=new counttrails(2 of 2);
                        cright[1]<<x+1<<y<<z+1<<map;
                        cright[1]>>nright>>map;
                        this[2]<<nup+ndown+nleft+nright<<map;
              else this[2]<<0<<map;
         else this[2]<<0<<map;
       }
  else this[2]<<0<<map;
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines) // {{{
( local SumScores($list(String)(2 of 1 pure,2) map, Int x, Int y, Int sum)
  ( map[1]<<^get<<y;
    map[1]>>
    {^err:
      map[1]>>err;
      map[1]<<^end;
      c=new console(2 of 2);
      c[1]<<^str<<"Result: "<<^int<<sum<<^nl<<^end;
     ^val:
      map[1]>>hline;
      if hline&^length<=x
      then SumScores(map,0,y+1,sum);
      else if hline&x="0"&0
           then s=new counttrails(2 of 2);
                s[1]<<x<<y<<"0"&0<<map;
                s[1]>>score>>map;
                c=new console(2 of 2);
                c[1]<<^str<<"Score("<<^int<<x<<^str<<","<<^int<<y<<^str<<")="<<^int<<score<<^nl<<^end;
                SumScores(map,x+1,y,sum+score);
           else SumScores(map,x+1,y,sum);
    }
  )
  SumScores(lines,0,0,0);
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
