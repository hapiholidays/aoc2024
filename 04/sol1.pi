#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"

#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define $wordsearch \
  2->1: $list(String)(2 of 1 pure,2); \
  1->2: Int; \
  $end;
global $wordsearch wordsearchLR(1,2);
local service WordSearchService(wordsearchLR (1 of 2) this) // {{{
( this[2]>>puzzle;
  local WSLR(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle, Int posx, Int posy, Int count) // {{{
  ( c=new console(2 of 2);
    c[1]<<^str<<"WSLR("<<^int<<posx<<^str<<","<<^int<<posy<<^str<<","<<^int<<count<<^str<<")"<<^nl<<^end;
    local ERR(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle) // {{{
    ( if posx<=1
      then puzzle[1]<<^end; this[2]<<count;
      else WSLR(this,puzzle,0,posy+1,count);
    ) // }}}
    puzzle[1]<<^get<<posy;
    puzzle[1]>>
    {^err: puzzle[1]>>err; ERR(this,puzzle);
     ^val: puzzle[1]>>line;
           if line&^length<=posx+3
           then ERR(this,puzzle);
           else if (line%posx)/4="XMAS"
           then WSLR(this,puzzle,posx+1,posy,count+1);
           else WSLR(this,puzzle,posx+1,posy,count);
    }
  ) // }}}
  WSLR(this,puzzle,0,0,0);
) // }}}
|
global $wordsearch wordsearchRL(1,2);
local service WordSearchService(wordsearchRL (1 of 2) this) // {{{
( this[2]>>puzzle;
  local WSRL(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle, Int posx, Int posy, Int count) // {{{
  ( c=new console(2 of 2);
    c[1]<<^str<<"WSRL("<<^int<<posx<<^str<<","<<^int<<posy<<^str<<","<<^int<<count<<^str<<")"<<^nl<<^end;
    local ERR(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle) // {{{
    ( if posx<=1
      then puzzle[1]<<^end; this[2]<<count;
      else WSRL(this,puzzle,0,posy+1,count);
    ) // }}}
    puzzle[1]<<^get<<posy;
    puzzle[1]>>
    {^err: puzzle[1]>>err; ERR(this,puzzle);
     ^val: puzzle[1]>>line;
           if line&^length<=posx+3
           then ERR(this,puzzle);
           else if (line%posx)/4="SAMX"
           then WSRL(this,puzzle,posx+1,posy,count+1);
           else WSRL(this,puzzle,posx+1,posy,count);
    }
  ) // }}}
  WSRL(this,puzzle,0,0,0);
) // }}}
|
global $wordsearch wordsearchULDR(1,2);
local service WordSearchService(wordsearchULDR (1 of 2) this) // {{{
( this[2]>>puzzle;
  local WSULDR(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle, Int posx, Int posy, Int count) // {{{
  ( c=new console(2 of 2);
    c[1]<<^str<<"WSULDR("<<^int<<posx<<^str<<","<<^int<<posy<<^str<<","<<^int<<count<<^str<<")"<<^nl<<^end;
    local ERR(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle) // {{{
    ( if posx<=1
      then puzzle[1]<<^end; this[2]<<count;
      else WSULDR(this,puzzle,0,posy+1,count);
    ) // }}}
    puzzle[1]<<^get<<posy;
    puzzle[1]>>
    {^err: puzzle[1]>>err; ERR(this,puzzle);
     ^val:
      puzzle[1]>>line1;
      puzzle[1]<<^get<<posy+1;
      puzzle[1]>>
      {^err: puzzle[1]>>err; ERR(this,puzzle);
       ^val:
        puzzle[1]>>line2;
        puzzle[1]<<^get<<posy+2;
        puzzle[1]>>
        {^err: puzzle[1]>>err; ERR(this,puzzle);
         ^val:
          puzzle[1]>>line3;
          puzzle[1]<<^get<<posy+3;
          puzzle[1]>>
          {^err: puzzle[1]>>err; ERR(this,puzzle);
           ^val:
            puzzle[1]>>line4;
            if (line1&^length<=posx) or (line2&^length<=posx+1) or (line3&^length<=posx+2) or (line4&^length<=posx+3)
            then ERR(this,puzzle);
            else if ((line1%posx)/1="X") and ((line2%(posx+1))/1="M") and ((line3%(posx+2))/1="A") and ((line4%(posx+3))/1="S")
            then WSULDR(this,puzzle,posx+1,posy,count+1);
            else WSULDR(this,puzzle,posx+1,posy,count);
          }
        }
      }
    }
  ) // }}}
  WSULDR(this,puzzle,0,0,0);
) // }}}
|
global $wordsearch wordsearchDRUL(1,2);
local service WordSearchService(wordsearchDRUL (1 of 2) this) // {{{
( this[2]>>puzzle;
  local WSDRUL(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle, Int posx, Int posy, Int count) // {{{
  ( c=new console(2 of 2);
    c[1]<<^str<<"WSDRUL("<<^int<<posx<<^str<<","<<^int<<posy<<^str<<","<<^int<<count<<^str<<")"<<^nl<<^end;
    local ERR(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle) // {{{
    ( if posx<=1
      then puzzle[1]<<^end; this[2]<<count;
      else WSDRUL(this,puzzle,0,posy+1,count);
    ) // }}}
    puzzle[1]<<^get<<posy;
    puzzle[1]>>
    {^err: puzzle[1]>>err; ERR(this,puzzle);
     ^val:
      puzzle[1]>>line1;
      puzzle[1]<<^get<<posy+1;
      puzzle[1]>>
      {^err: puzzle[1]>>err; ERR(this,puzzle);
       ^val:
        puzzle[1]>>line2;
        puzzle[1]<<^get<<posy+2;
        puzzle[1]>>
        {^err: puzzle[1]>>err; ERR(this,puzzle);
         ^val:
          puzzle[1]>>line3;
          puzzle[1]<<^get<<posy+3;
          puzzle[1]>>
          {^err: puzzle[1]>>err; ERR(this,puzzle);
           ^val:
            puzzle[1]>>line4;
            if (line1&^length<=posx) or (line2&^length<=posx+1) or (line3&^length<=posx+2) or (line4&^length<=posx+3)
            then ERR(this,puzzle);
            else if ((line1%posx)/1="S") and ((line2%(posx+1))/1="A") and ((line3%(posx+2))/1="M") and ((line4%(posx+3))/1="X")
            then WSDRUL(this,puzzle,posx+1,posy,count+1);
            else WSDRUL(this,puzzle,posx+1,posy,count);
          }
        }
      }
    }
  ) // }}}
  WSDRUL(this,puzzle,0,0,0);
) // }}}
|
global $wordsearch wordsearchURDL(1,2);
local service WordSearchService(wordsearchURDL (1 of 2) this) // {{{
( this[2]>>puzzle;
  local WSURDL(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle, Int posx, Int posy, Int count) // {{{
  ( c=new console(2 of 2);
    c[1]<<^str<<"WSURDL("<<^int<<posx<<^str<<","<<^int<<posy<<^str<<","<<^int<<count<<^str<<")"<<^nl<<^end;
    local ERR(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle) // {{{
    ( if posx<=1
      then puzzle[1]<<^end; this[2]<<count;
      else WSURDL(this,puzzle,0,posy+1,count);
    ) // }}}
    puzzle[1]<<^get<<posy;
    puzzle[1]>>
    {^err: puzzle[1]>>err; ERR(this,puzzle);
     ^val:
      puzzle[1]>>line1;
      puzzle[1]<<^get<<posy+1;
      puzzle[1]>>
      {^err: puzzle[1]>>err; ERR(this,puzzle);
       ^val:
        puzzle[1]>>line2;
        puzzle[1]<<^get<<posy+2;
        puzzle[1]>>
        {^err: puzzle[1]>>err; ERR(this,puzzle);
         ^val:
          puzzle[1]>>line3;
          puzzle[1]<<^get<<posy+3;
          puzzle[1]>>
          {^err: puzzle[1]>>err; ERR(this,puzzle);
           ^val:
            puzzle[1]>>line4;
            if (line1&^length<=posx+3) or (line2&^length<=posx+2) or (line3&^length<=posx+1) or (line4&^length<=posx)
            then ERR(this,puzzle);
            else if ((line1%(posx+3))/1="X") and ((line2%(posx+2))/1="M") and ((line3%(posx+1))/1="A") and ((line4%(posx))/1="S")
            then WSURDL(this,puzzle,posx+1,posy,count+1);
            else WSURDL(this,puzzle,posx+1,posy,count);
          }
        }
      }
    }
  ) // }}}
  WSURDL(this,puzzle,0,0,0);
) // }}}
|
global $wordsearch wordsearchDLUR(1,2);
local service WordSearchService(wordsearchDLUR (1 of 2) this) // {{{
( this[2]>>puzzle;
  local WSDLUR(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle, Int posx, Int posy, Int count) // {{{
  ( c=new console(2 of 2);
    c[1]<<^str<<"WSDLUR("<<^int<<posx<<^str<<","<<^int<<posy<<^str<<","<<^int<<count<<^str<<")"<<^nl<<^end;
    local ERR(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle) // {{{
    ( if posx<=1
      then puzzle[1]<<^end; this[2]<<count;
      else WSDLUR(this,puzzle,0,posy+1,count);
    ) // }}}
    puzzle[1]<<^get<<posy;
    puzzle[1]>>
    {^err: puzzle[1]>>err; ERR(this,puzzle);
     ^val:
      puzzle[1]>>line1;
      puzzle[1]<<^get<<posy+1;
      puzzle[1]>>
      {^err: puzzle[1]>>err; ERR(this,puzzle);
       ^val:
        puzzle[1]>>line2;
        puzzle[1]<<^get<<posy+2;
        puzzle[1]>>
        {^err: puzzle[1]>>err; ERR(this,puzzle);
         ^val:
          puzzle[1]>>line3;
          puzzle[1]<<^get<<posy+3;
          puzzle[1]>>
          {^err: puzzle[1]>>err; ERR(this,puzzle);
           ^val:
            puzzle[1]>>line4;
            if (line1&^length<=posx+3) or (line2&^length<=posx+2) or (line3&^length<=posx+1) or (line4&^length<=posx)
            then ERR(this,puzzle);
            else if ((line1%(posx+3))/1="S") and ((line2%(posx+2))/1="A") and ((line3%(posx+1))/1="M") and ((line4%(posx))/1="X")
            then WSDLUR(this,puzzle,posx+1,posy,count+1);
            else WSDLUR(this,puzzle,posx+1,posy,count);
          }
        }
      }
    }
  ) // }}}
  WSDLUR(this,puzzle,0,0,0);
) // }}}
|
global $wordsearch wordsearchUD(1,2);
local service WordSearchService(wordsearchUD (1 of 2) this) // {{{
( this[2]>>puzzle;
  local WSUD(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle, Int posx, Int posy, Int count) // {{{
  ( c=new console(2 of 2);
    c[1]<<^str<<"WSLU("<<^int<<posx<<^str<<","<<^int<<posy<<^str<<","<<^int<<count<<^str<<")"<<^nl<<^end;
    local ERR(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle) // {{{
    ( if posx<=1
      then puzzle[1]<<^end; this[2]<<count;
      else WSUD(this,puzzle,0,posy+1,count);
    ) // }}}
    puzzle[1]<<^get<<posy;
    puzzle[1]>>
    {^err: puzzle[1]>>err; ERR(this,puzzle);
     ^val:
      puzzle[1]>>line1;
      puzzle[1]<<^get<<posy+1;
      puzzle[1]>>
      {^err: puzzle[1]>>err; ERR(this,puzzle);
       ^val:
        puzzle[1]>>line2;
        puzzle[1]<<^get<<posy+2;
        puzzle[1]>>
        {^err: puzzle[1]>>err; ERR(this,puzzle);
         ^val:
          puzzle[1]>>line3;
          puzzle[1]<<^get<<posy+3;
          puzzle[1]>>
          {^err: puzzle[1]>>err; ERR(this,puzzle);
           ^val:
            puzzle[1]>>line4;
            if (line1&^length<=posx) or (line2&^length<=posx) or (line3&^length<=posx) or (line4&^length<=posx)
            then ERR(this,puzzle);
            else if ((line1%posx)/1="X") and ((line2%posx)/1="M") and ((line3%posx)/1="A") and ((line4%posx)/1="S")
            then WSUD(this,puzzle,posx+1,posy,count+1);
            else WSUD(this,puzzle,posx+1,posy,count);
          }
        }
      }
    }
  ) // }}}
  WSUD(this,puzzle,0,0,0);
) // }}}
|
global $wordsearch wordsearchDU(1,2);
local service WordSearchService(wordsearchDU (1 of 2) this) // {{{
( this[2]>>puzzle;
  local WSDU(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle, Int posx, Int posy, Int count) // {{{
  ( local ERR(1->2:Int;$end;(1 of 1,2) this, $list(String)(2 of 1 pure,2) puzzle) // {{{
    ( if posx<=1
      then puzzle[1]<<^end; this[2]<<count;
      else WSDU(this,puzzle,0,posy+1,count);
    ) // }}}
    puzzle[1]<<^get<<posy;
    puzzle[1]>>
    {^err: puzzle[1]>>err; ERR(this,puzzle);
     ^val:
      puzzle[1]>>line1;
      puzzle[1]<<^get<<posy+1;
      puzzle[1]>>
      {^err: puzzle[1]>>err; ERR(this,puzzle);
       ^val:
        puzzle[1]>>line2;
        puzzle[1]<<^get<<posy+2;
        puzzle[1]>>
        {^err: puzzle[1]>>err; ERR(this,puzzle);
         ^val:
          puzzle[1]>>line3;
          puzzle[1]<<^get<<posy+3;
          puzzle[1]>>
          {^err: puzzle[1]>>err; ERR(this,puzzle);
           ^val:
            puzzle[1]>>line4;
            if (line1&^length<=posx) or (line2&^length<=posx) or (line3&^length<=posx) or (line4&^length<=posx)
            then ERR(this,puzzle);
            else if ((line1%posx)/1="S") and ((line2%posx)/1="A") and ((line3%posx)/1="M") and ((line4%posx)/1="X")
            then c=new console(2 of 2);
                 c[1]<<^str<<"WSDU("<<^int<<posx<<^str<<","<<^int<<posy<<^str<<","<<^int<<count<<^str<<")"<<^nl<<^end;
                 WSDU(this,puzzle,posx+1,posy,count+1);
            else WSDU(this,puzzle,posx+1,posy,count);
          }
        }
      }
    }
  ) // }}}
  WSDU(this,puzzle,0,0,0);
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines, Int sum) // {{{
( lines[1]<<^copy;
  lines[1]>>lines_lr;
  s_lr=new wordsearchLR(2 of 2);
  s_lr[1]<<lines_lr;
  s_lr[1]>>count_lr;
  lines[1]<<^copy;
  lines[1]>>lines_rl;
  s_rl=new wordsearchRL(2 of 2);
  s_rl[1]<<lines_rl;
  s_rl[1]>>count_rl;
  lines[1]<<^copy;
  lines[1]>>lines_uldr;
  s_uldr=new wordsearchULDR(2 of 2);
  s_uldr[1]<<lines_uldr;
  s_uldr[1]>>count_uldr;
  lines[1]<<^copy;
  lines[1]>>lines_drul;
  s_drul=new wordsearchDRUL(2 of 2);
  s_drul[1]<<lines_drul;
  s_drul[1]>>count_drul;
  lines[1]<<^copy;
  lines[1]>>lines_urdl;
  s_urdl=new wordsearchURDL(2 of 2);
  s_urdl[1]<<lines_urdl;
  s_urdl[1]>>count_urdl;
  lines[1]<<^copy;
  lines[1]>>lines_dlur;
  s_dlur=new wordsearchDLUR(2 of 2);
  s_dlur[1]<<lines_dlur;
  s_dlur[1]>>count_dlur;
  lines[1]<<^copy;
  lines[1]>>lines_du;
  s_du=new wordsearchDU(2 of 2);
  s_du[1]<<lines_du;
  s_du[1]>>count_du;
  s_ud=new wordsearchUD(2 of 2);
  s_ud[1]<<lines;
  s_ud[1]>>count_ud;
  c=new console(2 of 2);
  c[1]<<^str<<"Result: "<<^int<<count_lr+count_rl+count_uldr+count_drul+count_urdl+count_dlur+count_du+count_ud<<^nl<<^end;
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines,0);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
