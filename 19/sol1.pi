#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <struct/set.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"

#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define $parsepatterns \
  2->1:String; \
  $list(String)
global $parsepatterns parsepatterns(1 pure,2);
local pure service Service(parsepatterns (1 of 2) this) // {{{
( this[2]>>str;
  sf=new strfind(2 of 2);
  sf[1]<<str<<", ";
  sf[1]>>pos;
  if 0<=pos
  then pat=str/pos;
       rest=str%(pos+2);
       pp=new parsepatterns(2 of 2);
       pp[1]<<rest;
       pp[1]<<^cons<<pat;
       pp[1]<<^takeover<<this;
  else res=new list(2 of 2);
       res<<String;
       res[1]<<^cons<<str;
       res[1]<<^takeover<<this;
) // }}}
|
#define $finduncheckedres \
  1->2:$set(Int)(2 of 1 pure,2); \
  1->2:$set(Int)(2 of 1 pure,2); \
  1->2:Int; \
  $end;
#define $findunchecked \
  2->1:$set(Int)(2 of 1 pure,2); \
  2->1:$set(Int)(2 of 1 pure,2); \
  2->1:Int; /*max*/\
  $finduncheckedres
global $findunchecked findunchecked(1 pure,2);
local pure service Service(findunchecked (1 of 2) this) // {{{
( local pure FindUnchecked($finduncheckedres(1 of 1 pure,2) this, // {{{
                           $set(Int)(2 of 1 pure,2) reached,
                           $set(Int)(2 of 1 pure,2) checked,
                           Int max,
                           Int pos)
  ( if max+1<=pos
    then this[2]<<reached<<checked<<0-1;
    else reached[1]<<^member<<pos;
         reached[1]>>r;
         checked[1]<<^member<<pos;
         checked[1]>>c;
         if r and not c
         then this[2]<<reached<<checked<<pos;
         else FindUnchecked(this,reached,checked,max,pos+1);
  )
  this[2]>>reached>>checked>>max;
  FindUnchecked(this,reached,checked,max,0);
) // }}}
|
#define $testpatternres \
  1->2:Int; \
  $end;
#define $testpattern \
  2->1:$list(String)(2 of 1 pure,2); \
  2->1:String; \
  $testpatternres
global $testpattern testpattern(1 pure,2);
local pure service Service(testpattern (1 of 2) this) // {{{
( local pure Test($testpatternres(1 of 1 pure,2) this, // {{{
                  String test,
                  $list(String)(2 of 1 pure,2) pats,
                  $set(Int)(2 of 1 pure,2) reached,
                  $set(Int)(2 of 1 pure,2) checked)
  ( fu=new findunchecked(2 of 2);
    fu[1]<<reached<<checked<<test&^length;
    fu[1]>>reached>>checked>>pos;
    if 0<=pos
    then local pure Checkpos($testpatternres(1 of 1 pure,2) this, // {{{
                        $list(String)(2 of 1 pure,2) pats,
                        $list(String)(2 of 1 pure,2) allpats,
                        $set(Int)(2 of 1 pure,2) reached,
                        $set(Int)(2 of 1 pure,2) checked)
         ( pats[1]<<^pop;
           pats[1]>>
           {^nil:
             checked[1]<<^insert<<pos;
             Test(this,test,allpats,reached,checked);
            ^cons:
             pats[1]>>pat>>ptail;
             // Test pat
             Int patlen=pat&^length;
             if (patlen+pos<=test&^length) and (pat=(test%pos)/patlen)
             then if patlen+pos=test&^length
                  then //HOST("cout<<\"+\"<<flush;") pure;
                       this[2]<<1;
                       ptail[1]<<^end;
                       allpats[1]<<^end;
                       reached[1]<<^end;
                       checked[1]<<^end;
                  else reached[1]<<^insert<<pos+patlen;
                       Checkpos(this,ptail,allpats,reached,checked);
             else Checkpos(this,ptail,allpats,reached,checked);
           }
         ) // }}}
         pats[1]<<^copy;
         pats[1]>>pcopy;
         Checkpos(this,pats,pcopy,reached,checked);
    else this[2]<<0;
         pats[1]<<^end;
         reached[1]<<^end;
         checked[1]<<^end;
  ) // }}}
  this[2]>>allpats>>test;
  reached=new set(2 of 2);
  reached<<Int;
  reached[1]<<stdorder_Int;
  reached[1]<<^insert<<0;
  checked=new set(2 of 2);
  checked<<Int;
  checked[1]<<stdorder_Int;
  Test(this,test,allpats,reached,checked);
) // }}}
|
#define $testpatternsres \
  1->2:Int; \
  $end;
#define $testpatterns \
  2->1:$list(String)(2 of 1 pure,2); \
  2->1:$list(String)(2 of 1 pure,2); \
  $testpatternsres
global $testpatterns testpatterns(1 pure,2);
local pure service Service(testpatterns (1 of 2) this) // {{{
( this[2]>>patterns>>tests;
  tests[1]<<^pop;
  tests[1]>>
  {^nil:
    this[2]<<0;
    patterns[1]<<^end;
   ^cons:
    tests[1]>>test>>tstail;
    patterns[1]<<^copy;
    patterns[1]>>pcopy;
    tp=new testpattern(2 of 2);
    tp[1]<<pcopy<<test;
    tp[1]>>c1;
    tp2=new testpatterns(2 of 2);
    tp2[1]<<patterns<<tstail;
    tp2[1]>>c2;
    this[2]<<c1+c2;
  }
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines) // {{{
( lines[1]<<^pop;
  lines[1]>>
  {^nil:
    debug("No patterns line");
   ^cons:
    lines[1]>>patstr>>tests;
    pats=new parsepatterns(2 of 2);
    pats[1]<<patstr;
    tp=new testpatterns(2 of 2);
    tp[1]<<pats<<tests;
    tp[1]>>count;
    c=new console(2 of 2);
    c[1]<<^str<<"Accepted patterns: "<<^int<<count<<^nl<<^end;
  }
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
