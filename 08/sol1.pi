#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <struct/set.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"

#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define $parsemapres \
  1->2:$list(Int)(2 of 1 pure,2); \
  $end;
#define $parsemap \
  2->1:$list(String)(2 of 1 pure,2); \
  $parsemapres
global $parsemap parsemap(1 pure,2);
local pure service Service(parsemap (1 of 2) this) // {{{
( local pure Parse($parsemapres(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) lines, Int y, $list(Int)(2 of 1 pure,2) antennas) // {{{
  ( lines[1]<<^pop;
    lines[1]>>
    {^nil:
      res=new mergesort(2 of 2);
      res<<Int;
      res[1]<<stdorder_Int<<antennas;
      res[1]>>ready;
      this[2]<<res;
     ^cons:
      lines[1]>>line>>ltail;
      local pure ParseLine($parsemapres(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) lines, String line, Int x, $list(Int)(2 of 1 pure,2) antennas) // {{{
      ( if line&^length<=x
        then Parse(this,lines,y+1,antennas);
        else if line&x="."&0
        then ParseLine(this,lines,line,x+1,antennas);
        else antennas[1]<<^cons<<(line&x)*1000000+y*1000+x;
             ParseLine(this,lines,line,x+1,antennas);
      ) // }}}
      ParseLine(this,ltail,line,0,antennas);
    }
  ) // }}}
  this[2]>>data;
  antennas=new list(2 of 2);
  antennas<<Int;
  Parse(this,data,0,antennas);
) // }}}
|
#define ispure pure
#define $findantipointsres \
  1->2:$set(Int)(2 of 1 pure,2); \
  $end;
#define $findantipoints \
  2->1:Int; \
  2->1:Int; \
  2->1:Int; \
  2->1:Int; \
  2->1:Int; \
  2->1:$list(Int)(2 of 1 pure,2); \
  $findantipointsres
global $findantipoints findantipoints(1 ispure,2);
local ispure service Service(findantipoints (1 of 2) this) // {{{
( this[2]>>maxx>>maxy>>x1>>y1>>sym1;
  local ispure Antipoints($findantipointsres(1 of 1 ispure,2) this, $list(Int)(2 of 1 pure,2) ps, $set(Int)(2 of 1 pure,2) res) // {{{
  ( ps[1]<<^pop;
    ps[1]>>
    {^nil:
      this[2]<<res;
     ^cons:
      ps[1]>>p2>>ps2;
      Int sym2=p2/1000000;
      Int y2=(p2-(p2/1000000)*1000000)/1000;
      Int x2=p2-(p2/1000)*1000;
      //c=new console(2 of 2);
      //c[1]<<^str<<"AP("<<^int<<x1<<^str<<","<<^int<<y1<<^str<<","<<^int<<x2<<^str<<","<<^int<<y2<<^str<<")"<<^nl<<^end;
      if not (sym1=sym2)
      then // No more matching symbols
           ps2[1]<<^end;
           this[2]<<res;
      else Int dx=x2-x1;
           Int dy=y2-y1;
           local ispure AddRest($findantipointsres(1 of 1 ispure,2) this, $list(Int)(2 of 1 pure,2) ps, $set(Int)(2 of 1 pure,2) res) // {{{
           ( Antipoints(this,ps,res);
           ) // }}}
           local ispure AddAP2($findantipointsres(1 of 1 ispure,2) this, $list(Int)(2 of 1 pure,2) ps, $set(Int)(2 of 1 pure,2) res) // {{{
           ( if ((dx-(dx/3)*3)=0) and
                ((dy-(dy/3)*3)=0)
             then res[1]<<^insert<<(y1+dy/3)*1000+(x1+dx/3);
                  res[1]<<^insert<<(y2-dy/3)*1000+(x2-dx/3);
                  AddRest(this,ps,res);
             else AddRest(this,ps,res);
           ) // }}}
           local ispure AddAP1($findantipointsres(1 of 1 ispure,2) this, $list(Int)(2 of 1 pure,2) ps, $set(Int)(2 of 1 pure,2) res) // {{{
           ( if (x1-dx<=maxx-1) and (0<=x1-dx) and
                (y1-dy<=maxy-1) and (0<=y1-dy)
             then //c=new console(2 of 2);
                  //c[1]<<^str<<" + "<<^int<<x2+dx<<^str<<","<<^int<<y2+dy<<^nl<<^end;
                  res[1]<<^insert<<(y1-dy)*1000+(x1-dx);
                  AddAP2(this,ps,res);
             else AddAP2(this,ps,res);
           ) // }}}
           if (x2+dx<=maxx-1) and (0<=x2+dx) and
              (y2+dy<=maxy-1) and (0<=y2+dy)
           then //c=new console(2 of 2);
                //c[1]<<^str<<" + "<<^int<<x2+dx<<^str<<","<<^int<<y2+dy<<^nl<<^end;
                res[1]<<^insert<<(y2+dy)*1000+(x2+dx);
                AddAP1(this,ps2,res);
           else AddAP1(this,ps2,res);
    }
  ) // }}}
  this[2]>>points;
  res=new set(2 of 2);
  res<<Int;
  res[1]<<stdorder_Int;
  Antipoints(this,points,res);
) // }}}
|
#define $antipoints \
  2->1:Int; \
  2->1:Int; \
  2->1:$list(Int)(2 of 1 pure,2); \
  $findantipointsres
global $antipoints antipoints(1 ispure,2);
local ispure service Service(antipoints (1 of 2) this) // {{{
( this[2]>>maxx>>maxy>>points;
  local ispure Antipoints($findantipointsres(1 of 1 ispure,2) this, $list(Int)(2 of 1 pure,2) points, $set(Int)(2 of 1 pure,2) res) // {{{
  ( points[1]<<^pop;
    points[1]>>
    {^nil: this[2]<<res;
     ^cons:
      points[1]>>p1>>ps;
      Int sym1=p1/1000000;
      Int y1=(p1-(p1/1000000)*1000000)/1000;
      Int x1=p1-(p1/1000)*1000;
      ps[1]<<^copy;
      ps[1]>>ps1;
      fa=new findantipoints(2 of 2);
      fa[1]<<maxx<<maxy<<x1<<y1<<sym1<<ps1;
      fa[1]>>r1;
      us=new unionset(2 of 2);
      us<<Int;
      us[1]<<r1<<res;
      us[1]>>res2;
      Antipoints(this,ps,res2);
    }
  ) // }}}
  res=new set(2 of 2);
  res<<Int;
  res[1]<<stdorder_Int;
  Antipoints(this,points,res);
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines) // {{{
( lines[1]<<^length;
  lines[1]>>maxy;
  lines[1]<<^get<<0;
  lines[1]>>
  {^err: lines[1]>>err;
         lines[1]<<^end;
         debug("No map");
   ^val: lines[1]>>line;
         Int maxx=line&^length;
         pm=new parsemap(2 of 2);
         pm[1]<<lines;
         pm[1]>>map;
         fa=new antipoints(2 of 2);
         fa[1]<<maxx<<maxy<<map;
         fa[1]>>apoints;
         apoints[1]<<^size;
         apoints[1]>>size;
         local DrawApoints($set(Int)(2 of 1 pure,2) amap, Int x, Int y, Int sym) // {{{
         ( if maxy<=y
           then amap[1]<<^end;
           else if maxx<=x
           then c=new console(2 of 2);
                c[1]<<^nl<<^end;
                DrawApoints(amap,0,y+1,sym);
           else if 200<=sym
           then c=new console(2 of 2);
                c[1]<<^str<<" "<<^end;
                DrawApoints(amap,x+1,y,0);
           else amap[1]<<^member<<sym*1000000+y*1000+x;
                amap[1]>>ap;
                if ap
                then c=new console(2 of 2);
                     c[1]<<^str<<"#"<<^end;
                     DrawApoints(amap,x+1,y,0);
                else DrawApoints(amap,x,y,sym+1);
         ) // }}}
         //DrawApoints(apoints,0,0,0);
         c=new console(2 of 2);
         c[1]<<^str<<"Number of antipoints: "<<^int<<size<<^nl<<^end;
         apoints[1]<<^end;
  }
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
