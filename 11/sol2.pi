#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"
#include "map.pi"

#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define ispure pure

#define $parsenumsres \
  1->2:$map(Int,Int)(2 of 1 pure,2); \
  $end;
#define $parsenums \
  2->1:String; \
  $parsenumsres
global $parsenums parsenums(1 pure,2);
local pure service Service(parsenums (1 of 2) this) // {{{
( local pure Parse($parsenumsres(1 of 1 pure,2) this, $map(Int,Int)(2 of 1 pure,2) upd, String data) // {{{
  ( if data&^length<=0
    then // No more items
      this[2]<<upd;
    else 
      sf=new strfind(2 of 2);
      sf[1]<<data<<" ";
      sf[1]>>pos;
      String nstr=if 1<=pos then data/pos else data;
      String rest=if 1<=pos then data%(pos+1) else "";
      Int n=0;
      STRING2INT(nstr,n) pure;
      upd[1]<<^lookup<<n;
      upd[1]>>
      {^nil:
        upd[1]<<^set<<n<<1;
        Parse(this,upd,rest);
       ^val:
        upd[1]>>v;
        upd[1]<<^set<<n<<v+1;
        Parse(this,upd,rest);
      }
  ) // }}}
  this[2]>>data;
  upd=new map(2 of 2);
  upd<<Int;
  upd<<Int;
  upd[1]<<stdorder_Int;
  Parse(this,upd,data);
) // }}}
|
#define $blinkres \
  1->2:$map(Int,Int)(2 of 1 pure,2); \
  $end;
#define $blink \
  2->1:$map(Int,Int)(2 of 1 pure,2); \
  2->1:$map(Int,Int)(2 of 1 pure,2); \
  $blinkres
global $blink blink(1 ispure,2);
local ispure service Service(blink (1 of 2) this) // {{{
( this[2]>>in;
  this[2]>>out;
  in[1]<<^pop;
  in[1]>>
  {^nil:
    this[2]<<out;
   ^tree:
    in[1]>>v>>c>>in1>>in2;
    blink1=new blink(2 of 2);
    blink1[1]<<in1<<out;
    blink1[1]>>out;
    blink2=new blink(2 of 2);
    blink2[1]<<in2<<out;
    blink2[1]>>out;
    if v=0
    then out[1]<<^lookup<<1;
         out[1]>>
         {^nil:
           out[1]<<^set<<1<<c;
           this[2]<<out;
          ^val:
           out[1]>>c1;
           out[1]<<^set<<1<<c+c1;
           this[2]<<out;
         }
    else String vstr="";
         INT2STRING(v,vstr) pure;
         Int vlen=vstr&^length;
         if vlen-(vlen/2)*2=0
    then String v1str=vstr/(vlen/2);
         Int v1=0;
         STRING2INT(v1str,v1) pure;
         String v2str=vstr%(vlen/2);
         Int v2=0;
         STRING2INT(v2str,v2) pure;
         out[1]<<^lookup<<v1;
         out[1]>>
         {^nil:
           out[1]<<^set<<v1<<c;
           out[1]<<^lookup<<v2;
           out[1]>>
           {^nil:
             out[1]<<^set<<v2<<c;
             this[2]<<out;
            ^val:
             out[1]>>c2;
             out[1]<<^set<<v2<<c+c2;
             this[2]<<out;
           }
          ^val:
           out[1]>>c1;
           out[1]<<^set<<v1<<c+c1;
           out[1]<<^lookup<<v2;
           out[1]>>
           {^nil:
             out[1]<<^set<<v2<<c;
             this[2]<<out;
            ^val:
             out[1]>>c2;
             out[1]<<^set<<v2<<c+c2;
             this[2]<<out;
           }
         }
    else out[1]<<^lookup<<v*2024;
         out[1]>>
         {^nil:
           out[1]<<^set<<v*2024<<c;
           this[2]<<out;
          ^val:
           out[1]>>c1;
           out[1]<<^set<<v*2024<<c+c1;
           this[2]<<out;
         }
  }
) // }}}
|
#define $summapres \
  1->2:Int; \
  $end;
#define $summap \
  2->1:$map(Int,Int)(2 of 1 pure,2); \
  $summapres
global $summap summap(1 pure,2);
local pure service Service(summap (1 of 2) this) // {{{
( this[2]>>s;
  s[1]<<^pop;
  s[1]>>
  {^nil:
    this[2]<<0;
   ^tree:
    s[1]>>v>>c>>s1>>s2;
    sum1=new summap(2 of 2);
    sum1[1]<<s1;
    sum1[1]>>c1;
    sum2=new summap(2 of 2);
    sum2[1]<<s2;
    sum2[1]>>c2;
    this[2]<<c+c1+c2;
  }
) // }}}
| // }}}
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines) // {{{
( lines[1]<<^pop;
  lines[1]>>
  {^nil:
    debug("No input");
   ^cons:
    lines[1]>>numsstr>>tail;
    tail[1]<<^end;
    pn=new parsenums(2 of 2);
    pn[1]<<numsstr;
    pn[1]>>nums;
    local Blink($map(Int,Int)(2 of 1 pure,2) stones, Int blinks) // {{{
    ( if blinks<=0
      then sm=new summap(2 of 2);
           sm[1]<<stones;
           sm[1]>>count;
           c=new console(2 of 2);
           c[1]<<^str<<"Number of stones: "<<^int<<count<<^nl<<^end;
      else bl=new blink(2 of 2);
           nstones=new map(2 of 2);
           nstones<<Int;
           nstones<<Int;
           nstones[1]<<stdorder_Int;
           bl[1]<<stones<<nstones;
           bl[1]>>stones;
           stones[1]<<^size;
           stones[1]>>size;
           //c=new console(2 of 2);
           //c[1]<<^str<<"Blink("<<^int<<blinks<<^str<<") has size: "<<^int<<size<<^nl<<^end;
           Blink(stones,blinks-1);
    ) // }}}
    Blink(nums,75);
  }
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
