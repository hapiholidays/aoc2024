#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"

// Process data and print result
local Process($list(String)(2 of 1 pure,2) data, $list(String)(2 of 1 pure,2) names, $list(Int)(2 of 1 pure,2) maxes) // {{{
( data[1]<<^pop;
  data[1]>>
  {^nil:
    local PrintRes($list(String)(2 of 1 pure,2) names, $list(Int)(2 of 1 pure,2) values) // {{{
    ( names[1]<<^pop;
      names[1]>>
      {^nil: values[1]<<^end;
       ^cons:
        names[1]>>name;
        names[1]>>names2;
        values[1]<<^pop;
        values[1]>>
        {^nil: names2[1]<<^end; // mismatch
         ^cons:
          values[1]>>val;
          values[1]>>values2;
          c=new console(2 of 2);
          c[1]<<^str<<"Result: "<<^str<<name+": "<<^int<<val<<^nl<<^end;
          PrintRes(names2,values2);
        }
      }
    ) // }}}
    PrintRes(names,maxes);
   ^cons:
    data[1]>>first>>rest;
    sf=new strfind(2 of 2);
    sf[1]<<first;
    sf[1]<<":";
    sf[1]>>pos;
    if pos<=0-1
    then Process(rest,names,maxes); // Bad line
    else String name=first/pos;
         String maxstr=first%(pos+1);
         Int max=0;
         STRING2INT(maxstr,max);
         local UpdMax(Int idx, $list(String)(2 of 1 pure,2) data, $list(String)(2 of 1 pure,2) names, $list(Int)(2 of 1 pure,2) maxes) // {{{
         ( names[1]<<^get<<idx;
           names[1]>>
           {^err: // Reached end, must add name
             names[1]>>err;
             names[1]<<^cons<<name;
             maxes[1]<<^cons<<max;
             Process(data,names,maxes);
            ^val:
             names[1]>>n;
             if n=name
             then maxes[1]<<^get<<idx;
                  maxes[1]>>
                  {^err: // This should not happen
                    maxes[1]>>err;
                    Process(data,names,maxes);
                   ^val:
                     maxes[1]>>m;
                     if max<=m
                     then Process(data,names,maxes);
                     else maxes[1]<<^set<<idx<<max;
                          Process(data,names,maxes);
                  }
             else UpdMax(idx+1,data,names,maxes);
           }
         ) // }}}
         UpdMax(0,rest,names,maxes);
  }
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=0
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      names=new list(2 of 2);
      names<<String;
      maxes=new list(2 of 2);
      maxes<<Int;
      Process(rlines,names,maxes);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
