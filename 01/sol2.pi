#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/linlist.pi>
#include <struct/pair.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"

// Process data and print result
local Process($list(String)(2 of 1 pure,2) data) // {{{
( sorted = new mergesort(2 of 2);
  sorted << String;
  sorted[1]<<stdorder_String<<data;
  sorted[1]>>x;
  rsorted = new revlist(2 of 2);
  rsorted << String;
  rsorted[1]<<sorted;
  ls = new list2str(2 of 2);
  ls<<String;
  ls[1]<<str2str<<rsorted;
  ls[1]>>lstr;
  c=new console(2 of 2);
  c[1]<<^str<<lstr<<^nl<<^end;
  //PrintStringList(rsorted);
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=0
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
