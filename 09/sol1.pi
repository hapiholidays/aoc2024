#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <struct/set.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"

#define ispure
#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define $parsediskmapres \
  1->2:$list(Int)(2 of 1 pure,2); \
  $end;
#define $parsediskmap \
  2->1:String; \
  $parseupdres
global $parsediskmap parsediskmap(1 pure,2);
local pure service Service(parsediskmap (1 of 2) this) // {{{
( local pure Parse($parsediskmapres(1 of 1 pure,2) this, $list(Int)(2 of 1 pure,2) rupd, String data) // {{{
  ( if data&^length<=0
    then // No more items
      upd=new revlist(2 of 2);
      upd<<Int;
      upd[1]<<rupd;
      this[2]<<upd;
    else 
      sf=new strfind(2 of 2);
      sf[1]<<data<<" ";
      sf[1]>>pos;
      String nstr=if 1<=pos then data/pos else data;
      String rest=if 1<=pos then data%(pos+1) else "";
      Int n=0;
      STRING2INT(nstr,n) pure;
      rupd[1]<<^cons<<n;
      Parse(this,rupd,rest);
  ) // }}}
  this[2]>>data;
  rupd=new list(2 of 2);
  rupd<<Int;
  Parse(this,rupd,data);
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines) // {{{
( lines[1]<<^pop;
  lines[1]>>
  {^nil:
    debug("No diskmap!");
   ^cons:
    lines[1]>>line>>ltail;
    ltail[1]<<^end;
    pdm=new parsediskmap(2 of 2);
    pdm[1]<<line;
    pdm[1]>>disk;
    cdm=new compressdiskmap(2 of 2);
    cdm[1]<<disk;
    cdm[1]>>cdisk;
    dmc=new diskmapchecksum(2 of 2);
    dmc[1]<<cdisk;
    dmc[1]>>checksum;
    c=new console(2 of 2);
    c[1]<<^str<<"Checksum: "<<^int<<checksum<<^nl<<^end;
  }
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines,0);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
