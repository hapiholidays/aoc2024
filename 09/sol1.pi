#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <struct/set.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"

#define ispure pure
#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define $nlist \
  2->1:Int; \
  2->1:Int; \
  $list(Int)
global $nlist nlist(1 pure,2);
local pure service Service(nlist (1 of 2) this) // {{{
( this[2]>>x>>n;
  if n<=0
  then res=new list(2 of 2);
       res<<Int;
       res[1]<<^takeover<<this;
  else res=new nlist(2 of 2);
       res[1]<<x<<n-1<<^cons<<x;
       res[1]<<^takeover<<this;
) // }}}
|
#define $parsediskmap \
  2->1:Int; \
  2->1:String; \
  $list(Int)
global $parsediskmap parsediskmap(1 ispure,2);
local ispure service Service(parsediskmap (1 of 2) this) // {{{
( this[2]>>fid>>data;
  if data&^length<=0
  then res=new list(2 of 2);
       res<<Int;
       res[1]<<^takeover<<this;
  else if data&^length<=1
  then Int size=0;
       STRING2INT(data,size) pure;
       res=new nlist(2 of 2);
       res[1]<<fid<<size<<^takeover<<this;
  else String sizestr=data/1;
       String data2=data%1;
       String freestr=data2/1;
       String data3=data2%1;
       res3=new parsediskmap(2 of 2);
       res3[1]<<fid+1<<data3;
       Int size=0;
       STRING2INT(sizestr,size) pure;
       Int free=0;
       STRING2INT(freestr,free) pure;
       res2=new nlist(2 of 2);
       res2[1]<<0-1<<free;
       res=new nlist(2 of 2);
       res[1]<<fid<<size;
       res[1]<<^append<<res2;
       res[1]<<^append<<res3;
       res[1]<<^takeover<<this;
) // }}}
|
#define $countused \
  2->1:$list(Int)(2 of 1 pure,2); \
  1->2:Int; \
  $list(Int)
global $countused countused(1 ispure,2);
local ispure service Service(countused (1 of 2) this) // {{{
( this[2]>>data;
  data[1]<<^pop;
  data[1]>>
  {^nil:
    this[2]<<0;
    res=new list(2 of 2);
    res<<Int;
    res[1]<<^takeover<<this;
   ^cons:
    data[1]>>head>>tail;
    restail=new countused(2 of 2);
    restail[1]<<tail;
    restail[1]>>r;
    restail[1]<<^cons<<head;
    if 0<=head
    then this[2]<<r+1;
         restail[1]<<^takeover<<this;
    else this[2]<<r;
         restail[1]<<^takeover<<this;
  }
) // }}}
|
#define $compressdiskmap \
  2->1:$list(Int)(2 of 1 pure,2); \
  $list(Int)
global $compressdiskmap compressdiskmap(1 ispure,2);
local ispure service Service(compressdiskmap (1 of 2) this) // {{{
( this[2]>>dm;
  cu=new countused(2 of 2);
  cu[1]<<dm;
  cu[1]>>used;
  sl=new splitlist(2 of 2);
  sl<<Int;
  sl[1]<<cu<<used;
  sl[1]>>free;
  rfree=new revlist(2 of 2);
  rfree<<Int;
  rfree[1]<<free;
  local ispure Compress($list(Int)(1 of 1 pure,2) this, $list(Int)(2 of 1 pure,2) dm, $list(Int)(2 of 1 pure,2) rfree, $list(Int)(2 of 1 pure,2) res) // {{{
  ( dm[1]<<^pop;
    dm[1]>>
    {^nil:
      rres=new revlist(2 of 2);
      rres<<Int;
      rres[1]<<res;
      rres[1]<<^takeover<<this;
      rfree[1]<<^end;
     ^cons:
      dm[1]>>head>>tail;
      if 0<=head
      then res[1]<<^cons<<head;
           Compress(this,tail,rfree,res);
      else local ispure PopFree($list(Int)(1 of 1 pure,2) this, $list(Int)(2 of 1 pure,2) dm, $list(Int)(2 of 1 pure,2) rfree, $list(Int)(2 of 1 pure,2) res) // {{{
           ( rfree[1]<<^pop;
             rfree[1]>>
             {^nil: // This should not happen
               res[1]<<^cons<<0-1;
               rf=new list(2 of 2);
               rf<<Int;
               Compress(this,dm,rf,res);
              ^cons:
               rfree[1]>>head>>tail;
               if 0<=head
               then res[1]<<^cons<<head;
                    Compress(this,dm,tail,res);
               else PopFree(this,dm,tail,res);
             }
           ) // }}}
           PopFree(this,tail,rfree,res);
    }
  ) // }}}
  res=new list(2 of 2);
  res<<Int;
  Compress(this,sl,rfree,res);
) // }}}
|
#define $diskmapchecksum \
  2->1:$list(Int)(2 of 1 pure,2); \
  2->1:Int; \
  1->2:Int; \
  $end;
global $diskmapchecksum diskmapchecksum(1 ispure,2);
local ispure service Service(diskmapchecksum (1 of 2) this) // {{{
( this[2]>>dm>>i;
  dm[1]<<^pop;
  dm[1]>>
  {^nil:
    this[2]<<0;
   ^cons:
    dm[1]>>head>>tail;
    dmc=new diskmapchecksum(2 of 2);
    dmc[1]<<tail<<i+1;
    dmc[1]>>r;
    this[2]<<r+i*head;
  }
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines) // {{{
( lines[1]<<^pop;
  lines[1]>>
  {^nil:
    debug("No diskmap!");
   ^cons:
    lines[1]>>line>>ltail;
    ltail[1]<<^end;
    pdm=new parsediskmap(2 of 2);
    pdm[1]<<0<<line;
    cdm=new compressdiskmap(2 of 2);
    cdm[1]<<pdm;
    //pl=new printlist(2 of 2);
    //pl<<Int;
    //pl[1]<<int2string<<cdm;
    dmc=new diskmapchecksum(2 of 2);
    dmc[1]<<cdm<<0;
    dmc[1]>>checksum;
    c=new console(2 of 2);
    c[1]<<^str<<"Checksum: "<<^int<<checksum<<^nl<<^end;
  }
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
