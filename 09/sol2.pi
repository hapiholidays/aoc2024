#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <struct/set.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"
#include "map.pi"

#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define $printdiskmap \
  2->1:$map(Int,Int)(2 of 1 pure,2); /* updated diskmap */\
  $end;
global $printdiskmap printdiskmap(1,2);
local service Service(printdiskmap (1 of 2) this) // {{{
( this[2]>>dm;
  local Print($console(2 of 1,2) c, $map(Int,Int)(2 of 1 pure,2) dm, Int pos) // {{{
  ( dm[1]<<^lookup<<pos;
    dm[1]>>
    {^nil:
      c[1]<<^nl<<^end;
      dm[1]<<^end;
     ^val:
      dm[1]>>v;
      c[1]<<^int<<v<<^str<<",";
      Print(c,dm,pos+1);
    }
  ) // }}}
  c=new console(2 of 2);
  Print(c,dm,0);
) // }}}
|
#define $setrangeres \
  1->2:$map(Int,Int)(2 of 1 pure,2); /* updated diskmap */\
  $end;
#define $setrange \
  2->1:$map(Int,Int)(2 of 1 pure,2); /* diskmap */\
  2->1:Int; /*from*/\
  2->1:Int; /*to*/\
  2->1:Int; /*val*/\
  $setrangeres
global $setrange setrange(1 pure,2);
local pure service Service(setrange (1 of 2) this) // {{{
( this[2]>>dm>>from>>to>>val;
  local pure SetRange($setrangeres(1 of 1 pure,2) this, $map(Int,Int)(2 of 1 pure,2) dm, Int pos) // {{{
  ( if to<=pos
    then this[2]<<dm;
    else dm[1]<<^set<<pos<<val;
         SetRange(this,dm,pos+1);
  ) // }}}
  SetRange(this,dm,from);
) // }}}
|
#define $parsediskmap \
  2->1:Int; /*fid*/\
  2->1:Int; /*pos*/\
  2->1:String; \
  1->2:$map(Int,Int)(2 of 1 pure,2); \
  1->2:Int; /*len*/ \
  $end;
global $parsediskmap parsediskmap(1 pure,2);
local pure service Service(parsediskmap (1 of 2) this) // {{{
( this[2]>>fid>>pos>>data;
  if data&^length<=0
  then res=new map(2 of 2);
       res<<Int;
       res<<Int;
       res[1]<<stdorder_Int;
       this[2]<<res;
       this[2]<<pos;
  else if data&^length<=1
  then res=new map(2 of 2);
       res<<Int;
       res<<Int;
       res[1]<<stdorder_Int;
       Int size=0;
       STRING2INT(data,size) pure;
       sr=new setrange(2 of 2);
       sr[1]<<res<<pos<<pos+size<<fid;
       sr[1]>>res;
       this[2]<<res;
       this[2]<<pos+size;
  else String sizestr=data/1;
       String data2=data%1;
       String freestr=data2/1;
       String data3=data2%1;
       Int size=0;
       STRING2INT(sizestr,size) pure;
       Int free=0;
       STRING2INT(freestr,free) pure;
       pdm=new parsediskmap(2 of 2);
       pdm[1]<<fid+1<<pos+size+free<<data3;
       pdm[1]>>res>>maxpos;
       sr1=new setrange(2 of 2);
       sr1[1]<<res<<pos<<pos+size<<fid;
       sr1[1]>>res;
       sr2=new setrange(2 of 2);
       sr2[1]<<res<<pos+size<<pos+size+free<<0-1;
       sr2[1]>>res;
       this[2]<<res;
       this[2]<<maxpos;
) // }}}
|
#define $findfileres \
  1->2:Int;                       /* file id */\
  1->2:Int;                       /* file position */\
  1->2:Int;                       /* file length */\
  1->2:$map(Int,Int)(2 of 1 pure,2); /* return diskmap */\
  $end;
#define $findfile \
  2->1:$map(Int,Int)(2 of 1 pure,2); /* diskmap */\
  2->1:Int;                       /* pos */\
  $findfileres
global $findfile findfile(1 pure,2);
local pure service Service(findfile (1 of 2) this) // {{{
( this[2]>>dm>>pos;
  local pure FindFile($findfileres(1 of 1 pure,2) this, $map(Int,Int)(2 of 1 pure,2) dm, Int end) // {{{
  ( dm[1]<<^lookup<<end;
    dm[1]>>
    {^nil:
      this[2]<<0-1<<0-1<<0-1<<dm;
     ^val:
      dm[1]>>v;
      if 0<=v // not free
      then local pure FindFileStart($findfileres(1 of 1 pure,2) this, $map(Int,Int)(2 of 1 pure,2) dm, Int start) // {{{
           ( dm[1]<<^lookup<<start;
             dm[1]>>
             {^nil:
               this[2]<<v<<start+1<<end-start<<dm;
              ^val:
               dm[1]>>v2;
               if v2=v
               then FindFileStart(this,dm,start-1);
               else this[2]<<v<<start+1<<end-start<<dm;
             }
           ) // }}}
           FindFileStart(this,dm,end-1);
      else FindFile(this,dm,end-1);
    }
  ) // }}}
  FindFile(this,dm,pos-1);
) // }}}
|
#define $findfreeres \
  1->2:$map(Int,Int)(2 of 1 pure,2); /* diskmap */\
  1->2:Int; /* pos */\
  $end;
#define $findfree \
  2->1:$map(Int,Int)(2 of 1 pure,2); /* diskmap */\
  2->1:Int; /* size */\
  2->1:Int; /* min */\
  2->1:Int; /* max */\
  $findfreeres
global $findfree findfree(1 pure,2);
local pure service Service(findfree (1 of 2) this) // {{{
( this[2]>>data>>size>>min>>max;
  local pure FindFree($findfreeres(1 of 1 pure,2) this, $map(Int,Int)(2 of 1 pure,2) data, Int pos) // {{{
  ( local pure TestFree($findfreeres(1 of 1 pure,2) this, $map(Int,Int)(2 of 1 pure,2) data, Int idx) // {{{
    ( if size<=idx
      then this[2]<<data<<pos;
      else if max<=pos+idx
      then this[2]<<data<<0-1;
      else data[1]<<^lookup<<pos+idx;
           data[1]>>
           {^nil:
             this[2]<<data<<0-1;
            ^val:
             data[1]>>val;
             if 0<=val
             then FindFree(this,data,pos+idx+1);
             else TestFree(this,data,idx+1);
           }
    ) // }}}
    TestFree(this,data,0);
  ) // }}}
  FindFree(this,data,min);
) // }}}
|
#define $movefileres \
  1->2:$map(Int,Int)(2 of 1 pure,2); /* diskmap */\
  $end;
#define $movefile \
  2->1:$map(Int,Int)(2 of 1 pure,2); /* diskmap */\
  2->1:Int; /* file id */\
  2->1:Int; /* file pos */\
  2->1:Int; /* file length */\
  2->1:Int; /* dest */\
  $movefileres
global $movefile movefile(1 pure,2);
local pure service Service(movefile (1 of 2) this) // {{{
( this[2]>>data>>id>>pos>>len>>dst;
  local pure Move($movefileres(1 of 1 pure,2) this, $map(Int,Int)(2 of 1 pure,2) data, Int idx) // {{{
  ( if len<=idx
    then this[2]<<data;
    else data[1]<<^set<<dst+idx<<id;
         data[1]<<^set<<pos+idx<<0-1;
         Move(this,data,idx+1);
  ) // }}}
  Move(this,data,0);
) // }}}
|
#define $compressdiskmap \
  2->1:$map(Int,Int)(2 of 1 pure,2); \
  2->1:$map(Int,Int)(2 of 1 pure,2); \
  2->1:Int; /*pos*/ \
  1->2:$map(Int,Int)(2 of 1 pure,2); \
  $end;
global $compressdiskmap compressdiskmap(1 pure,2);
local pure service Service(compressdiskmap (1 of 2) this) // {{{
( this[2]>>dm>>fmap>>pos;
  ff=new findfile(2 of 2);
  ff[1]<<dm<<pos;
  ff[1]>>fid>>fpos>>flen>>dm;
  if 0<=fid
  then fmap[1]<<^lookup<<flen;
       fmap[1]>>
       {^nil:
         ffree=new findfree(2 of 2);
         ffree[1]<<dm<<flen<<0<<fpos;
         ffree[1]>>dm>>freepos;
         fmap[1]<<^set<<flen<<if 0<=freepos then freepos else fpos;
         if (0<=freepos) and (freepos<=fpos)
         then mf=new movefile(2 of 2);
              mf[1]<<dm<<fid<<fpos<<flen<<freepos;
              mf[1]>>dm;
              cd=new compressdiskmap(2 of 2);
              cd[1]<<dm<<fmap<<fpos;
              cd[1]>>dm;
              this[2]<<dm;
         else cd=new compressdiskmap(2 of 2);
              cd[1]<<dm<<fmap<<fpos;
              cd[1]>>dm;
              this[2]<<dm;
        ^val:
         fmap[1]>>fstart;
         ffree=new findfree(2 of 2);
         ffree[1]<<dm<<flen<<fstart<<fpos;
         ffree[1]>>dm>>freepos;
         fmap[1]<<^set<<flen<<if 0<=freepos then freepos else fpos;
         if (0<=freepos) and (freepos<=fpos)
         then mf=new movefile(2 of 2);
              mf[1]<<dm<<fid<<fpos<<flen<<freepos;
              mf[1]>>dm;
              cd=new compressdiskmap(2 of 2);
              cd[1]<<dm<<fmap<<fpos;
              cd[1]>>dm;
              this[2]<<dm;
         else cd=new compressdiskmap(2 of 2);
              cd[1]<<dm<<fmap<<fpos;
              cd[1]>>dm;
              this[2]<<dm;
       }
  else this[2]<<dm;
       fmap[1]<<^end;
) // }}}
|
#define $diskmapchecksum \
  2->1:$map(Int,Int)(2 of 1 pure,2); \
  2->1:Int; /*pos*/\
  1->2:Int; \
  $end;
global $diskmapchecksum diskmapchecksum(1 pure,2);
local pure service Service(diskmapchecksum (1 of 2) this) // {{{
( this[2]>>dm>>i;
  dm[1]<<^lookup<<i;
  dm[1]>>
  {^nil:
    dm[1]<<^end;
    this[2]<<0;
   ^val:
    dm[1]>>head;
    dmc=new diskmapchecksum(2 of 2);
    dmc[1]<<dm<<i+1;
    dmc[1]>>r;
    Int factor=if head<=0 then 0 else head;
    this[2]<<r+i*factor;
  }
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines) // {{{
( lines[1]<<^pop;
  lines[1]>>
  {^nil:
    debug("No diskmap!");
   ^cons:
    lines[1]>>line>>ltail;
    ltail[1]<<^end;
    pdm=new parsediskmap(2 of 2);
    pdm[1]<<0<<0<<line;
    pdm[1]>>dm>>len;
    fmap=new map(2 of 2);
    fmap<<Int;
    fmap<<Int;
    fmap[1]<<stdorder_Int;
    cdm=new compressdiskmap(2 of 2);
    cdm[1]<<dm<<fmap<<len;
    cdm[1]>>dm;
    dm[1]<<^copy;
    dm[1]>>dmcpy;
    print=new printdiskmap(2 of 2);
    print[1]<<dmcpy;
    //pl=new printlist(2 of 2);
    //pl<<Int;
    //pl[1]<<int2string<<cdm;
    //pf=new popfile(2 of 2);
    //pf[1]<<pdm;
    //pf[1]>>fid>>len>>rest;
    //pl=new printlist(2 of 2);
    //pl<<Int;
    //pl[1]<<int2string<<pf;
    //c=new console(2 of 2);
    //c[1]<<^str<<"File id: "<<^int<<fid<<^str<<" length: "<<^int<<len<<^nl<<^end;
    //pl=new printlist(2 of 2);
    //pl<<Int;
    //pl[1]<<int2string<<rest;
    dmc=new diskmapchecksum(2 of 2);
    dmc[1]<<dm<<0;
    dmc[1]>>checksum;
    c=new console(2 of 2);
    c[1]<<^str<<"Checksum: "<<^int<<checksum<<^nl<<^end;
  }
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
