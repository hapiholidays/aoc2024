#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <struct/set.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"
#include "map.pi"

#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define $parsemazeres \
  1->2:$set(Int)(2 of 1 pure,2); /* chart */\
  1->2:Int; /*max*/\
  $end;
#define $parsemaze \
  2->1:$list(String)(2 of 1 pure,2); \
  $parsemazeres
global $parsemaze parsemaze(1 pure,2);
local pure service Service(parsemaze (1 of 2) this) // {{{
( local pure ParseMaze($parsemazeres(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) blocks, $set(Int)(2 of 1 pure,2) maze, Int max) // {{{
  ( blocks[1]<<^pop;
    blocks[1]>>
    {^nil:
      this[2]<<maze<<max;
     ^cons:
      blocks[1]>>line>>btail;
      sf=new strfind(2 of 2);
      sf[1]<<line<<",";
      sf[1]>>pos;
      if 0<=pos
      then String xstr=line/pos;
           Int x=0;
           STRING2INT(xstr,x) pure;
           String ystr=line%(pos+1);
           Int y=0;
           STRING2INT(ystr,y) pure;
           maze[1]<<^insert<<x+y*1000;
           ParseMaze(this,btail,maze,if x<=y then if max<=y then y else max else if max<=x then x else max);
      else // Skip line
           HOST("cout << \"skipping line\"<<endl;") pure;
           ParseMaze(this,btail,maze,max);
    }
  ) // }}}
  this[2]>>blocks;
  maze=new set(2 of 2);
  maze<<Int;
  maze[1]<<stdorder_Int;
  ParseMaze(this,blocks,maze,0);
) // }}}
|
#define $updtileres \
  1->2:$list(Int)(2 of 1 pure,2); /*worklist*/\
  1->2:$set(Int)(2 of 1 pure,2);  /*maze*/\
  1->2:$map(Int,Int)(2 of 1 pure,2); /*shortes paths*/\
  $end;
#define $updtile \
  2->1:$list(Int)(2 of 1 pure,2); /*worklist*/\
  2->1:$set(Int)(2 of 1 pure,2);  /*maze*/\
  2->1:$map(Int,Int)(2 of 1 pure,2); /*shortes paths*/\
  2->1:Int; /*x*/\
  2->1:Int; /*y*/\
  2->1:Int; /*dist*/\
  2->1:Int; /*max*/\
  $updtileres
global $updtile updtile(1 pure,2);
local pure service Service(updtile (1 of 2) this) // {{{
( this[2]>>wl>>maze>>sp>>x>>y>>dist>>max;
  if (0<=x) and (x<=max) and (0<=y) and (y<=max)
  then Int pos=x+y*1000;
       maze[1]<<^member<<pos;
       maze[1]>>blocked;
       if blocked
       then this[2]<<wl<<maze<<sp;
       else sp[1]<<^lookup<<pos;
            sp[1]>>
            {^nil:
              wl[1]<<^snoc<<pos;
              sp[1]<<^set<<pos<<dist;
              this[2]<<wl<<maze<<sp;
             ^val:
              sp[1]>>d;
              if d<=dist
              then this[2]<<wl<<maze<<sp;
              else wl[1]<<^snoc<<pos;
                   sp[1]<<^set<<pos<<dist;
                   this[2]<<wl<<maze<<sp;
            }
  else this[2]<<wl<<maze<<sp;
) // }}}
|
#define $findshortestpathres \
  1->2:$set(Int)(2 of 1 pure,2);  /*maze*/\
  1->2:$map(Int,Int)(2 of 1 pure,2); /*shortes paths*/\
  $end;
#define $findshortestpath \
  2->1:$list(Int)(2 of 1 pure,2); /*worklist*/\
  2->1:$set(Int)(2 of 1 pure,2);  /*maze*/\
  2->1:$map(Int,Int)(2 of 1 pure,2); /*shortes paths*/\
  2->1:Int; /*max*/\
  $findshortestpathres
global $findshortestpath findshortestpath(1 pure,2);
local pure service Service(findshortestpath (1 of 2) this) // {{{
( this[2]>>wl>>maze>>sp>>max;
  wl[1]<<^pop;
  wl[1]>>
  {^nil:
    this[2]<<maze<<sp;
   ^cons:
    wl[1]>>pos>>wltail;
    Int y=pos/1000;
    Int x=pos-y*1000;
    sp[1]<<^lookup<<pos;
    sp[1]>>
    {^nil:
      HOST("cout<<\"No sp for worklist pos\"<<endl;") pure;
      //Continue
      fsp=new findshortestpath(2 of 2);
      fsp[1]<<wltail<<maze<<sp<<max;
      fsp[1]>>maze>>sp;
      this[2]<<maze<<sp;
     ^val:
      sp[1]>>d;
      // Update left
      ul=new updtile(2 of 2);
      ul[1]<<wltail<<maze<<sp<<x-1<<y<<d+1<<max;
      ul[1]>>wltail>>maze>>sp;
      // Update right
      ur=new updtile(2 of 2);
      ur[1]<<wltail<<maze<<sp<<x+1<<y<<d+1<<max;
      ur[1]>>wltail>>maze>>sp;
      // Update up
      uu=new updtile(2 of 2);
      uu[1]<<wltail<<maze<<sp<<x<<y-1<<d+1<<max;
      uu[1]>>wltail>>maze>>sp;
      // Update down
      ud=new updtile(2 of 2);
      ud[1]<<wltail<<maze<<sp<<x<<y+1<<d+1<<max;
      ud[1]>>wltail>>maze>>sp;
      //Continue
      fsp=new findshortestpath(2 of 2);
      fsp[1]<<wltail<<maze<<sp<<max;
      fsp[1]>>maze>>sp;
      this[2]<<maze<<sp;
    }
  }
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines) // {{{
( pm=new parsemaze(2 of 2);
  pm[1]<<lines;
  pm[1]>>maze>>max;
  sp = new map(2 of 2);
  sp<<Int;
  sp<<Int;
  sp[1]<<stdorder_Int;
  sp[1]<<^set<<0<<0; // Starting at 0;
  wl=new list(2 of 2);
  wl<<Int;
  wl[1]<<^cons<<0;      // Add starting pos to worklist
  fsp=new findshortestpath(2 of 2);
  fsp[1]<<wl<<maze<<sp<<max;
  fsp[1]>>maze>>sp;
  sp[1]<<^lookup<<max+1000*max;
  sp[1]>>
  {^nil: debug("No path found");
         maze[1]<<^end;
         sp[1]<<^end;
   ^val: sp[1]>>v;
         c=new console(2 of 2);
         c[1]<<^str<<"Found path of length: "<<^int<<v<<^nl<<^end;
         maze[1]<<^end;
         sp[1]<<^end;

  }
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
