#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <struct/set.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"

#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define $parsemapres \
  1->2:$set(Int)(2 of 1 pure,2); \
  1->2:Int; \
  $end;
#define $parsemap \
  2->1:$list(String)(2 of 1 pure,2); \
  $parsemapres
global $parsemap parsemap(1 pure,2);
local pure service Service(parsemap (1 of 2) this) // {{{
( local pure ParseMap($parsemapres(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) lines, $set(Int)(2 of 1 pure,2) blocks, Int guard, Int y) // {{{
  ( local pure ParseMapLine($parsemapres(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) lines, $set(Int)(2 of 1 pure,2) blocks, String line, Int guard, Int x) // {{{
    ( if line&^length<=x
      then ParseMap(this,lines,blocks,guard,y+1);
      else if (line&x)=("#"&0)
      then blocks[1]<<^insert<<y*1000+x;
           ParseMapLine(this,lines,blocks,line,guard,x+1);
      else if (line&x)=("^"&0)
      then ParseMapLine(this,lines,blocks,line,1000000+1000*y+x,x+1);
      else if (line&x)=("v"&0)
      then ParseMapLine(this,lines,blocks,line,2000000+1000*y+x,x+1);
      else if (line&x)=("<"&0)
      then ParseMapLine(this,lines,blocks,line,3000000+1000*y+x,x+1);
      else if (line&x)=(">"&0)
      then ParseMapLine(this,lines,blocks,line,4000000+1000*y+x,x+1);
      else ParseMapLine(this,lines,blocks,line,guard,x+1);
    ) // }}}
    lines[1]<<^pop;
    lines[1]>>
    {^nil: this[2]<<blocks<<guard;
     ^cons: lines[1]>>line>>ltail;
            ParseMapLine(this,ltail,blocks,line,guard,0);
    }
  ) // }}}
  this[2]>>lines;
  blocks=new set(2 of 2);
  blocks<<Int;
  blocks[1]<<stdorder_Int;
  ParseMap(this,lines,blocks,0,0);
) // }}}
|
#define $simguardres \
  1->2:Int; \
  $end;
#define $simguard \
  2->1:$set(Int)(2 of 1 pure,2); \
  2->1:Int; \
  2->1:Int; \
  2->1:Int; \
  $simguardres
#define ispure pure
global $simguard simguard(1 ispure,2);
local ispure service Service(simguard (1 of 2) this) // {{{
( local ispure Sim($simguardres(1 of 1 ispure,2) this, $set(Int)(2 of 1 pure,2) blocks, $set(Int)(2 of 1 pure,2) trail, Int guard, Int maxx, Int maxy)
  ( // Debug
    //c=new console(2 of 2);
    //c[1]<<^str<<"Sim "<<^int<<guard<<^nl<<^end;
    // Add guard pos
    trail[1]<<^insert<<guard-(guard/1000000)*1000000;
    // Extract guard state
    Int dir=guard/1000000;
    Int x=guard-(guard/1000)*1000;
    Int y=(guard-(guard/1000000)*1000000)/1000;
    local ispure Done($simguardres(1 of 1 ispure,2) this, $set(Int)(2 of 1 pure,2) blocks, $set(Int)(2 of 1 pure,2) trail)
    ( blocks[1]<<^end;
      trail[1]<<^size;
      trail[1]>>size;
      trail[1]<<^end;
      this[2]<<size;
    )
    if dir=1 // up
    then if y<=0
         then Done(this,blocks,trail);
         else blocks[1]<<^member<<(y-1)*1000+x;
              blocks[1]>>blocked;
              if blocked
              then Sim(this,blocks,trail,4000000+y*1000+x,maxx,maxy);
              else Sim(this,blocks,trail,1000000+(y-1)*1000+x,maxx,maxy);
    else if dir=2 // down
    then if maxy<=(y+1)
         then Done(this,blocks,trail);
         else blocks[1]<<^member<<(y+1)*1000+x;
              blocks[1]>>blocked;
              if blocked
              then Sim(this,blocks,trail,3000000+y*1000+x,maxx,maxy);
              else Sim(this,blocks,trail,2000000+(y+1)*1000+x,maxx,maxy);
    else if dir=3 // left
    then if x<=0
         then Done(this,blocks,trail);
         else blocks[1]<<^member<<y*1000+x-1;
              blocks[1]>>blocked;
              if blocked
              then Sim(this,blocks,trail,1000000+y*1000+x,maxx,maxy);
              else Sim(this,blocks,trail,3000000+y*1000+x-1,maxx,maxy);
    else // right
         if maxx<=(x+1)
         then Done(this,blocks,trail);
         else blocks[1]<<^member<<y*1000+x+1;
              blocks[1]>>blocked;
              if blocked
              then Sim(this,blocks,trail,2000000+y*1000+x,maxx,maxy);
              else Sim(this,blocks,trail,4000000+y*1000+x+1,maxx,maxy);
  )
  this[2]>>blocks>>guard>>maxx>>maxy;
  trail=new set(2 of 2);
  trail<<Int;
  trail[1]<<stdorder_Int;
  Sim(this,blocks,trail,guard,maxx,maxy);
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines) // {{{
( lines[1]<<^length;
  lines[1]>>maxy;
  lines[1]<<^get<<0;
  lines[1]>>
  {^err: lines[1]>>err; lines[1]<<^end;
         debug("Error: No lines");
   ^val: lines[1]>>line;
         Int maxx=line&^length;
         pm=new parsemap(2 of 2);
         pm[1]<<lines;
         pm[1]>>blocks>>guard;
         c=new console(2 of 2);
         c[1]<<^str<<"guard: "<<^int<<guard<<^nl<<^end;
         sg=new simguard(2 of 2);
         sg[1]<<blocks<<guard<<maxx<<maxy;
         sg[1]>>size;
         c=new console(2 of 2);
         c[1]<<^str<<"Size of trail: "<<^int<<size<<^nl<<^end;
  }
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
