#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"

#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define $wordsearch \
  2->1: $list(String)(2 of 1 pure,2); \
  1->2: Int; \
  $end;
global $wordsearch wordsearchXMAS(1 pure,2);
local pure service WordSearchService(wordsearchXMAS (1 of 2) this) // {{{
( local pure WS(1->2:Int;$end;(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) puzzle, String line1, String line2, String line3, Int posx, Int count) // {{{
  ( local pure ERR(1->2:Int;$end;(1 of 1 pure,2) this, $list(String)(2 of 1 pure,2) puzzle) // {{{
    ( puzzle[1]<<^pop;
      puzzle[1]>>
      {^nil: this[2]<<count;
       ^cons: puzzle[1]>>line4>>ptail;
              WS(this,ptail,line2,line3,line4,0,count);
      }
    ) // }}}
    if (line1&^length<=posx+2) or (line2&^length<=posx+2) or (line3&^length<=posx+2)
    then ERR(this,puzzle);
    else if ((line2%(posx+1))/1="A") and
            ((line1%posx)/1="M") and ((line3%(posx+2))/1="S") and
            ((line1%(posx+2))/1="M") and ((line3%posx)/1="S")
    then WS(this,puzzle,line1,line2,line3,posx+1,count+1);
    else if ((line2%(posx+1))/1="A") and
            ((line1%posx)/1="S") and ((line3%(posx+2))/1="M") and
            ((line1%(posx+2))/1="M") and ((line3%posx)/1="S")
    then WS(this,puzzle,line1,line2,line3,posx+1,count+1);
    else if ((line2%(posx+1))/1="A") and
            ((line1%posx)/1="M") and ((line3%(posx+2))/1="S") and
            ((line1%(posx+2))/1="S") and ((line3%posx)/1="M")
    then WS(this,puzzle,line1,line2,line3,posx+1,count+1);
    else if ((line2%(posx+1))/1="A") and
            ((line1%posx)/1="S") and ((line3%(posx+2))/1="M") and
            ((line1%(posx+2))/1="S") and ((line3%posx)/1="M")
    then WS(this,puzzle,line1,line2,line3,posx+1,count+1);
    else WS(this,puzzle,line1,line2,line3,posx+1,count);
  ) // }}}
  this[2]>>puzzle;
  puzzle[1]<<^pop;
  puzzle[1]>>
  {^nil: this[2]<<0;
   ^cons: puzzle[1]>>line1>>puzzle1;
          puzzle1[1]<<^pop;
          puzzle1[1]>>
          {^nil: this[2]<<0;
           ^cons: puzzle1[1]>>line2>>puzzle2;
                  puzzle2[1]<<^pop;
                  puzzle2[1]>>
                  {^nil: this[2]<<0;
                   ^cons: puzzle2[1]>>line3>>puzzle3;
                          WS(this,puzzle3,line1,line2,line3,0,0);
                  }
          }
  }
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines, Int sum) // {{{
( s_lr=new wordsearchXMAS(2 of 2);
  s_lr[1]<<lines;
  s_lr[1]>>count;
  c=new console(2 of 2);
  c[1]<<^str<<"Result: "<<^int<<count<<^nl<<^end;
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines,0);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
