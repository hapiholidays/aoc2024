#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <struct/set.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"
#include "map.pi"

#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define ispure
#define $bestpathres \
  1->2:$list(String)(2 of 1 pure,2); \
  1->2:$map(Int,Int)(2 of 1 pure,2); \
  1->2:Int; \
  $end;
#define $bestpath \
  2->1:$list(String)(2 of 1 pure,2); \
  2->1:$map(Int,Int)(2 of 1 pure,2); \
  2->1:Int; \
  2->1:Int; \
  2->1:Int; \
  2->1:Int; \
  $bestpathres
global $bestpath bestpath(1 ispure,2);
local ispure service Service(bestpath (1 of 2) this) // {{{
( this[2]>>maze>>states>>x>>y>>dir>>score;
  c=new console(2 of 2);
  c[1]<<^str<<"bestpath "<<^int<<x<<^str<<","<<^int<<y<<^str<<","<<^int<<dir<<^str<<","<<^int<<score<<^nl<<^end;
  maze[1]<<^get<<y;
  maze[1]>>
  {^err:
    maze[1]>>err;
    this[2]<<maze<<states<<0-1;
   ^val:
    maze[1]>>hline;
    if hline&x="#"&0 // Asume we stay inside the map
    then this[2]<<maze<<states<<0-1;
    else if hline&x="E"&0 // Yay, we reached E
    then this[2]<<maze<<states<<score;
    else local Cont($bestpathres(1 of 1 ispure,2) this, // {{{
                    $list(String)(2 of 1 pure,2) maze,
                    $map(Int,Int)(2 of 1 pure,2) states)
         ( states[1]<<^set<<dir*1000000+y*1000*x<<score;
           // Try forward
           bs1=new bestpath(2 of 2);
           bs1[1]<<maze<<states
                 <<if dir=1 then x+1 else if dir=3 then x-1 else x
                 <<if dir=0 then y-1 else if dir=2 then y+1 else y
                 << dir <<score+1;
           bs1[1]>>maze>>states>>score1;
           // Try turn left
           Int leftdir=if dir<=0 then 3 else dir-1;
           bs2=new bestpath(2 of 2);
           bs2[1]<<maze<<states<<x<<y<<leftdir<<score+1000;
           bs2[1]>>maze>>states>>score2;
           // Try turn right
           Int rightdir=if 3<=dir then 0 else dir+1;
           bs3=new bestpath(2 of 2);
           bs3[1]<<maze<<states<<x<<y<<rightdir<<score+1000;
           bs3[1]>>maze>>states>>score3;
           // Return best
           this[2]<<maze<<states;
           if (score1<=0-1) and (score2<=score3)
           then this[2]<<score2;
           else if (score1<=0-1) and (score3<=score2)
           then this[2]<<score3;
           else if (score1<=score2) and (score1<=score3)
           then this[2]<<score1;
           else if (score2<=score1) and (score2<=score3)
           then this[2]<<score2;
           else //if (score3<=score1) and (score3<=score2)
                this[2]<<score3;
         ) // }}}
         states[1]<<^lookup<<dir*1000000+y*1000+x;
         states[1]>>
         {^nil:
           Cont(this,maze,states);
          ^val:
           states[1]>>prevscore;
           if prevscore<=score
           then this[2]<<maze<<states<<0-1; // Nothing new
           else Cont(this,maze,states);
         }
  }
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines) // {{{
( local FindStart($list(String)(2 of 1 pure,2) lines, Int x, Int y) // {{{
  ( lines[1]<<^get<<y;
    lines[1]>>
    {^err:
      lines[1]>>err;
      lines[1]<<^end;
      debug("No start position");
     ^val:
      lines[1]>>line;
      if line&^length<=x
      then FindStart(lines,0,y+1);
      else if not (line&x="S"&0)
      then FindStart(lines,x+1,y);
      else
        bp=new bestpath(2 of 2);
        states=new map(2 of 2);
        states<<Int;
        states<<Int;
        states[1]<<stdorder_Int;
        bp[1]<<lines<<states<<x<<y<<1<<0; // start position facing east score=0
        bp[1]>>lines>>states>>minscore;
        lines[1]<<^end;
        states[1]<<^end;
        c=new console(2 of 2);
        c[1]<<^str<<"Least score: "<<^int<<minscore<<^nl<<^end;
    }
  ) // }}}
  FindStart(lines,0,0);
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
