#include <sys/args.pi>
#include <sys/file.pi>
#include <struct/list.pi>
#include <struct/set.pi>
#include <console.pi>
#include <convert.pi>
#include "listutils.pi"
#include "strutils.pi"
#include "map.pi"

#define debug(msg) c_dbg=new console(2 of 2); c_dbg[1]<<^str<<msg<<^nl<<^end

#define ispure pure
#define $bestpathres \
  1->2:$list(String)(2 of 1 pure,2); /* Return maze */ \
  1->2:$map(Int,Int)(2 of 1 pure,2); /* Updated states */ \
  1->2:$set(Int)(2 of 1 pure,2); /* Used tiles */\
  1->2:Int; /* result */ \
  $end;
#define $bestpath \
  2->1:$list(String)(2 of 1 pure,2); /* Maze */ \
  2->1:$map(Int,Int)(2 of 1 pure,2); /* Current states */ \
  2->1:Int; \
  2->1:Int; \
  2->1:Int; \
  2->1:Int; \
  2->1:Int; \
  $bestpathres
global $bestpath bestpath(1 ispure,2);
local ispure service Service(bestpath (1 of 2) this) // {{{
( this[2]>>maze>>states>>x>>y>>dir>>score>>maxscore;
  if maxscore<=score
  then us=new set(2 of 2);
       us<<Int;
       us[1]<<stdorder_Int;
       this[2]<<maze<<states<<us<<maxscore;
  else
    Int state=dir*1000000+y*1000+x;
    maze[1]<<^get<<y;
    maze[1]>>
    {^err:
      maze[1]>>err;
      us=new set(2 of 2);
      us<<Int;
      us[1]<<stdorder_Int;
      this[2]<<maze<<states<<us<<maxscore;
     ^val:
      maze[1]>>hline;
      if hline&x="#"&0 // Asume we stay inside the map
      then us=new set(2 of 2);
           us<<Int;
           us[1]<<stdorder_Int;
           this[2]<<maze<<states<<us<<maxscore;
      else if hline&x="E"&0 // Yay, we reached E
      then us=new set(2 of 2);
           us<<Int;
           us[1]<<stdorder_Int;
           us[1]<<^insert<<y*1000+x;
           this[2]<<maze<<states<<us<<score;
      else local ispure Cont($bestpathres(1 of 1 ispure,2) this, // {{{
                             $list(String)(2 of 1 pure,2) maze,
                             $map(Int,Int)(2 of 1 pure,2) states)
           ( //c=new console(2 of 2);
             //c[1]<<^str<<"bestpath "<<^int<<state<<^str<<" score "<<^int<<score<<^nl<<^end;
             states[1]<<^set<<state<<score;
             // Try forward
             bs1=new bestpath(2 of 2);
             bs1[1]<<maze<<states
                   <<if dir=1 then x+1 else if dir=3 then x-1 else x
                   <<if dir=0 then y-1 else if dir=2 then y+1 else y
                   << dir <<score+1<<maxscore;
             bs1[1]>>maze>>states>>us1>>score1;
             // Try turn left
             Int leftdir=if dir<=0 then 3 else dir-1;
             bs2=new bestpath(2 of 2);
             bs2[1]<<maze<<states<<x<<y<<leftdir<<score+1000<<maxscore;
             bs2[1]>>maze>>states>>us2>>score2;
             // Try turn right
             Int rightdir=if 3<=dir then 0 else dir+1;
             bs3=new bestpath(2 of 2);
             bs3[1]<<maze<<states<<x<<y<<rightdir<<score+1000<<maxscore;
             bs3[1]>>maze>>states>>us3>>score3;
             // Return best
             this[2]<<maze<<states;
             if (score1=score2) and (score1=score3)
             then usust=new unionset(2 of 2);
                  usust<<Int;
                  usust[1]<<us1<<us2;
                  usust[1]>>ust;
                  usus=new unionset(2 of 2);
                  usus<<Int;
                  usus[1]<<ust<<us3;
                  usus[1]>>us;
                  us[1]<<^insert<<y*1000+x;
                  this[2]<<us<<score1;
             else if (score2<=score1) and (score2=score3)
             then us1[1]<<^end;
                  usus=new unionset(2 of 2);
                  usus<<Int;
                  usus[1]<<us2<<us3;
                  usus[1]>>us;
                  us[1]<<^insert<<y*1000+x;
                  this[2]<<us<<score2;
             else if (score1<=score2) and (score1=score3)
             then us2[1]<<^end;
                  usus=new unionset(2 of 2);
                  usus<<Int;
                  usus[1]<<us1<<us3;
                  usus[1]>>us;
                  us[1]<<^insert<<y*1000+x;
                  this[2]<<us<<score1;
             else if (score1<=score3) and (score1=score2)
             then us3[1]<<^end;
                  usus=new unionset(2 of 2);
                  usus<<Int;
                  usus[1]<<us1<<us2;
                  usus[1]>>us;
                  us[1]<<^insert<<y*1000+x;
                  this[2]<<us<<score1;
             else if (score3<=score1) and (score3<=score2)
             then us1[1]<<^end;
                  us2[1]<<^end;
                  us3[1]<<^insert<<y*1000+x;
                  this[2]<<us3<<score3;
             else if (score2<=score1) and (score2<=score3)
             then us1[1]<<^end;
                  us3[1]<<^end;
                  us2[1]<<^insert<<y*1000+x;
                  this[2]<<us2<<score2;
             else // score 1 is best
                  us2[1]<<^end;
                  us3[1]<<^end;
                  us1[1]<<^insert<<y*1000+x;
                  this[2]<<us1<<score1;
           ) // }}}
           states[1]<<^lookup<<state;
           states[1]>>
           {^nil:
             //c=new console(2 of 2);
             //c[1]<<^str<<"State "<<^int<<state<<^str<<" is new"<<^nl<<^end;
             Cont(this,maze,states);
            ^val:
             states[1]>>prevscore;
             //c=new console(2 of 2);
             //c[1]<<^str<<"State "<<^int<<state<<^str<<" had previous score "<<^int<<prevscore<<^nl<<^end;
             if score<=prevscore
             then Cont(this,maze,states);
             else us=new set(2 of 2);
                  us<<Int;
                  us[1]<<stdorder_Int;
                  this[2]<<maze<<states<<us<<maxscore; // Nothing new
           }
    }
) // }}}
|
// Process data and print result
local Process($list(String)(2 of 1 pure,2) lines) // {{{
( local FindStart($list(String)(2 of 1 pure,2) lines, Int x, Int y) // {{{
  ( lines[1]<<^get<<y;
    lines[1]>>
    {^err:
      lines[1]>>err;
      lines[1]<<^end;
      debug("No start position");
     ^val:
      lines[1]>>line;
      if line&^length<=x
      then FindStart(lines,0,y+1);
      else if not (line&x="S"&0)
      then FindStart(lines,x+1,y);
      else
        bp=new bestpath(2 of 2);
        states=new map(2 of 2);
        states<<Int;
        states<<Int;
        states[1]<<stdorder_Int;
        bp[1]<<lines<<states<<x<<y<<0<<1000<<72500; // start position facing up score=1000 maxscore a bit above best score // Manual help
        bp[1]>>lines>>states>>us>>minscore;
        us[1]<<^size;
        us[1]>>count;
        us[1]<<^end;
        lines[1]<<^end;
        states[1]<<^end;
        c=new console(2 of 2);
        c[1]<<^str<<"Least score: "<<^int<<minscore<<^str<<" counted tiles: "<<^int<<count<<^nl<<^end;
    }
  ) // }}}
  FindStart(lines,0,0);
) // }}}
// Parse file, handle errors and call Process with parsed structure
local ProcessFile($infile(2 of 1,2) fin) // {{{
( local ProcessFile2($infile(2 of 1,2) fin, $list(String)(2 of 1 pure,2) lines) // {{{
  ( fin[1]<<^Line;
    fin[1]>>
    {^Some:
      fin[1]>>line;
      // Ignore empty lines
      if line&^length<=1
      then ProcessFile2(fin,lines);
      else lines[1]<<^cons<<line;
           ProcessFile2(fin,lines);
     ^None:
      rlines=new revlist(2 of 2);
      rlines<<String;
      rlines[1]<<lines;
      Process(rlines);
    }
  ) // }}}
  lines=new list(2 of 2);
  lines<<String;
  ProcessFile2(fin,lines);
) // }}}
// Open file, handle errors and call ProcessFile with filehandle in case of success
local ProcessFilename(String fname) // {{{
( f=new file(2 of 2);
  f[1]<<^Read<<fname;
  f[1]>>
  {^OK:
    ProcessFile(f);
   ^Error:
    f[1]>>err;
    c=new console(2 of 2);
    c[1]<<^str<<"Unable to open input file: " << ^str << err << ^nl << ^end;
  }
) // }}}
// Actual program
arguments = new args(2 of 2);
arguments[1]<<^arg<<1;
arguments[1]>>
{^none:
  arguments[1]<<^end;
  ProcessFilename("input");
 ^some:
  arguments[1]>>fname;
  arguments[1]<<^end;
  ProcessFilename(fname);
}
